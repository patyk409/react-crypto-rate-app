{"version":3,"sources":["images/bitcoin.png","components/CryptoList.js","components/Crypto.js","App.js","reportWebVitals.js","index.js"],"names":["CryptoList","props","listElements","cryptoList","map","cryptoObj","className","cssClass","lastRate","htmlArray","currency","symbol","Crypto","getCryptoData","axios","get","then","res","tickers","data","setState","state","newCryptoList","ticker","cryptoRate","lastCryptoObj","find","newCryptoObj","buy","sell","last","undefined","push","Object","entries","filterCryptoList","inputFilter","value","trim","toUpperCase","filteredCryptoList","filter","includes","this","timerId","setInterval","clearInterval","type","ref","placeholder","onChange","Component","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a9c1a7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bitcoin.995f1e67.png\";","import React from 'react'\r\nimport '../styles/CryptoList.css'\r\n\r\nconst CryptoList = (props) => {\r\n  let cryptoList = props.cryptoList\r\n\r\n  let listElements = cryptoList.map((cryptoObj) => {\r\n    return (\r\n      <li key={cryptoObj.currency}>\r\n        <span className=\"CryptoLabel\">Last Rate:</span>\r\n        <span className={`CryptoRate ${cryptoObj.cssClass}`}>\r\n          {cryptoObj.lastRate} {cryptoObj.htmlArray}\r\n        </span>\r\n        <span className=\"CryptoTicker\">{cryptoObj.currency}</span>\r\n        <span className=\"CryptoSymbol\">[{cryptoObj.symbol}]</span>\r\n      </li>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className=\"CryptoList\">\r\n      <ul className=\"List\">{listElements}</ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CryptoList\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../styles/Crypto.css';\r\nimport CryptoList from '../components/CryptoList';\r\n\r\nclass Crypto extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      cryptoList: [],\r\n      filteredCryptoList: []\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCryptoData();\r\n\r\n    this.timerId = setInterval(() => {\r\n      this.getCryptoData()\r\n    }, 1000);\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerId);\r\n  };\r\n\r\n  getCryptoData = () => {\r\n    axios.get('https://blockchain.info/ticker')\r\n      .then(res => {\r\n        const tickers = res.data;\r\n        this.setState(state => {\r\n          let newCryptoList = [];\r\n\r\n          for (const [ticker, cryptoRate] of Object.entries(tickers)) {\r\n            let lastCryptoObj = state.cryptoList.find(cryptoObj => {\r\n              return (cryptoObj.currency === ticker);\r\n            });\r\n\r\n            let newCryptoObj = {\r\n              currency: ticker,\r\n              symbol: cryptoRate.symbol,\r\n              buy: cryptoRate.buy,\r\n              sell: cryptoRate.sell,\r\n              lastRate: cryptoRate.last\r\n            };\r\n\r\n            if (lastCryptoObj !== undefined) {\r\n              if (newCryptoObj.lastRate > lastCryptoObj.lastRate) {\r\n                newCryptoObj.cssClass = 'green';\r\n                newCryptoObj.htmlArray = <i className=\"fas fa-arrow-up\"></i>;\r\n              } else if (newCryptoObj.lastRate < lastCryptoObj.lastRate) {\r\n                newCryptoObj.cssClass = 'red';\r\n                newCryptoObj.htmlArray = <i className=\"fas fa-arrow-down\"></i>;\r\n              } else {\r\n                newCryptoObj.cssClass = 'blue';\r\n                newCryptoObj.htmlArray = <i className=\"fas fa-arrow-right\"></i>;\r\n              }\r\n            } else {\r\n              newCryptoObj.cssClass = 'blue';\r\n              newCryptoObj.htmlArray = <i className=\"fas fa-arrow-right\"></i>;\r\n            }\r\n\r\n            newCryptoList.push(newCryptoObj);\r\n          };\r\n\r\n          return ({\r\n            cryptoList: newCryptoList\r\n          });\r\n        });\r\n\r\n        this.filterCryptoList();\r\n      });\r\n  };\r\n\r\n  filterCryptoList = () => {\r\n    this.inputFilter.value = this.inputFilter.value.trim().toUpperCase();\r\n\r\n    this.setState(state => {\r\n      let newFilteredCryptoList = state.cryptoList.filter(cryptoObj => {\r\n        return (cryptoObj.currency.includes(this.inputFilter.value));\r\n      });\r\n\r\n      return ({\r\n        filteredCryptoList: newFilteredCryptoList\r\n      });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Crypto\">\r\n        <input type=\"text\" ref={data => this.inputFilter = data} placeholder=\"FILTER\" onChange={this.filterCryptoList} />\r\n        <CryptoList cryptoList={this.state.filteredCryptoList} />\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default Crypto;\r\n","import logo from './images/bitcoin.png';\nimport './App.css';\nimport Crypto from './components/Crypto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Bitcoin Rate</h1>\n      </header>\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}